buildscript {
    ext {
        springBootVersion = '1.4.5.RELEASE'
        powermockVersion = '1.6.6'
    }
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public"}
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.github.jengelman.gradle.plugins:gradle-processes:0.3.0')
        classpath("com.palantir:jacoco-coverage:0.4.0")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: "org.sonarqube"
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'com.palantir.jacoco-full-report' 

group = 'cn.leet.code'
 
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public"}
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR6'
    }
}

dependencies {

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.apache.curator:curator-client:2.12.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.getsentry.raven:raven-log4j:7.8.0'
    compile 'net.sf.json-lib:json-lib:2.2.1:jdk15'
    compile 'org.json:json:20140107'
    compile 'com.google.code.gson:gson:2.0'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    
    // Test
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
    testCompile("org.powermock:powermock-core:${powermockVersion}")
    testCompile("org.powermock:powermock-module-junit4:${powermockVersion}")
    testCompile("org.powermock:powermock-module-junit4-rule-agent:${powermockVersion}")
    testCompile("org.powermock:powermock-module-javaagent:${powermockVersion}")
    testCompile("org.powermock:powermock-api-mockito:${powermockVersion}")
    
    testCompile("junit:junit:4.12")
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
}

task wrapper(type: Wrapper){
    gradleVersion='2.9'
    distributionUrl='http://cdn-img-oss-prod.kuick.cn/tool/gradle-2.9-bin.zip'
}

jar {
    baseName = "app"
    destinationDir = new File("$projectDir/build/libs")
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/cusomJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination  "${buildDir}/jacocoHtml"
    }
}

test {
    jacoco {
        enabled = true
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }


    doFirst {
        def agentJar = project.configurations["testCompile"].filter {
            it.name == "powermock-module-javaagent-${powermockVersion}.jar"
        }.singleFile

        jvmArgs "-noverify", extensions.jacoco.asJvmArg, "-javaagent:" + agentJar.canonicalPath
    }
    
    doLast {
        jvmArgs "-noverify", extensions.jacoco.asJvmArg
    }
}

tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

jacocoCoverage {
    reportThreshold 0.01, INSTRUCTION, "leetcode-server" 
}